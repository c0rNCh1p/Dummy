
	                  __________  _______  _________ ___ ___
	                  \__   _   )/   _   \/   _____//   |   \
	                   |   __   \   /_\   \_____   \    ~    \
	                   |________/____|____/________/____|____/

	DESCRIPTION
	 The GNU Bourne Again Shell. Bash is a shell compatible command language
	 interpreter that executes commands read from the standard input or from a
	 file. Bash also incorporates useful features from the Korn and C shells. Bash
	 is intended to be a conforming implementation of the Shell and Utilities
	 portion of the IEEE (Institute of Electrical and Electronics Engineers) POSIX
	 (Portable Operating System Interface) specification (IEEE Standard 1003.1).s
	 
	COMMANDS
	 bash # Launch or refresh command line shell session
	 bash -i # Launch or refresh interactive shell session
	 bash -l # Launch or refresh login (root) shell session
	 bash -r # Launch or refresh restricted shell session 
	 bash -c # Launch a subshell to run commands in the background
	 bash -x <script.sh> # Enable debugging mode for bash scripts
	 bash +x <script.sh> # Enable reverse debugging mode for bash scripts

	OPERATORS
	 '$' # Variable reference
	 '+' # Addition
	 '/' # Division
	 '!' # Logical not
	 '%' # Modulo (remainder)
	 '*' # Multiplication
	 '-' # Subtraction
	 '==' # Equal to
	 '**' # Exponentiation
	 '!=' # Not equal (strings)
	 '-a' '&&' # Logical and
	 '-ef' # Inode and device numbers
	 '-eq' '=' # Equal (strings)
	 '-ge' '>=' # Greater than or equal to
	 '-gt' '>' # Greater than
	 '-le' '<=' # Less than or equal to
	 '-lt' '<' # Less than
	 '-ne' '!=' # Not equal to
	 '-nt' # Newer than (files)
	 '-o' '||' # Logical or
	 '-ot' # Older than (files)
	 '[[]]' # Extended conditional
	 '()' # Group parameters
	 '(())' # Perform arithmetic
	 '[]' # Short conditional
	 '{}' # Structural data reference

	BUILTINS
	   # Bash is pretty big, many of its builtin functions and commands have their
	   # own flags and some also have a binary. Every element in this list can
	   # either be used on the command line or from a script. Each builtin has a
	   # manual page and help output explaining its usage and flag options
	 alias # List or define new aliases
	 bg # Run jobs in the background
	 bind # Bind a name to a socket
	 break # Exit from a loop
	 builtin # Explicitly execute commands as a shell builtins
	 caller # Return the context of the current subroutine call
	 case # Define a case statement
	 cd # Change directory
	 command # Execute a simple command
	 compgen # Display possible completions depending on the options
	 complete # Specify how arguments are to be completed by readline
	 compopt # Modify or display completion options
	 continue # Continue a loop
	 coproc # Run a command in a subshell asynchronously
	 declare # Set variable values and attributes
	 dirs # Display directory stack
	 disown # Remove jobs from current shell
	 echo # Print line of text
	    # Echo recognises these escape sequences with the -e flag
	  '\\' # Backslash
	  '\a' # Alert
	  '\b' # Backspace
	  '\c' # No further output
	  '\e' # Escape out
	  '\f' # Form feed
	  '\n' # New line
	  '\r' # Carriage return
	  '\t' # Horizontal tab
	  '\v' # Vertical tab	
	 enable # Enable and disable shell builtins
	 eval # Construct command by concatenating arguments
	 exec # Execute commands and open, close, or copy file descriptors
	 exit # Cause the shell to exit
	 export # Set the export attribute for variables
	 false # Do nothing unsuccessfully
	 fc # Process the command history list
	 fg # Run jobs in the foreground
	 for # Initialize a for loop
	 function # Initialize a function
	 getopts # Parse utility options
	 hash # Remember or report utility locations
	 help # Display information about builtin commands
	 history # Show command history
	 if # Initialize an if statement
	 jobs # Display status of jobs in the current session
	 kill # Terminate a process
	 let # Evaluate arithmetic expressions
	 local # Define local variables
	 logout # Login, logout, utmp and wtmp entries
	 mapfile # Read lines from standard input into an array
	 popd # Remove directories from stack
	 printf # Format and print data
	    # Printf recognises these format specifiers
	  '%a' # Hexadecimal float
	  '%c' # Character
	  '%d' # Signed decimal integer
	  '%e' # Scientific notation
	  '%f' # Float
	  '%g' # Use shorter %e or %f format
	  '%.nf' # Float with n digits of precision
	  '%o' # Octal integer
	  '%p' # Pointer address (hexadecimal)
	  '%s' # String
	  '%u' # Unsigned decimal integer
	  '%x' # Hexadecimal integer	 
	 pushd # Add directories to stack
	 pwd # Print name of current/working directory
	 read # Read from standard input into a variable
	 readarray # Read lines from a file into an array
	 readonly # Set the readonly attribute for variable
	 return # Return from a function or dot script
	 select # Synchronous i/o multiplexing
	 set # Set or unset options and positional parameters
	 shift # Shift positional parameters
	 shopt # Set and unset shell options
	 source # Execute commands from a file in the current shell
	 suspend # Suspend shell execution
	 test # Check file types and compare values
	    # The test command uses the following options for the different types of
	    # data it reads as well as the flag operators in the above section
	  '-b' <file> # File is block special
	  '-c' <file> # File is character special
	  '-d' <file> # File is directory
	  '-e' <file> # File exists
	  '-f' <file> # Regular file
	  '-G' <file> # Owned by effective group id
	  '-g' <file> # Set group id bit set
	  '-h' '-L' <file> # Symbolic link
	  '-k' <file> # Sticky bit set
	  '-N' <file> # Modified since last read
	  '-n' <str> # String length is non zero
	  '-O' <file> # Owned by effective user id
	  '-p' <file> # File is a named pipe
	  '-r' <file> # File user has read access to
	  '-s' <file> # Filesize greater than zero
	  '-S' <file> # File is a socket
	  '-t' <fd> # File descriptor is opened in terminal
	  '-u' <file> # File its set user id bit is set
	  '-w' <file> # File user has write access to
	  '-x' <file> # File user has execute access to
	  '-z' <str> # String length is zero
	 time # time a Simple command or give resource usage
	 times # Write process times
	 trap # Trap signals
	 true # Do nothing, successfully
	 type # Write a description of command type
	 typeset # Set variable values and attributes
	 ulimit # Set or report file size limit
	 umask # Get or set the file mode creation mask
	 unalias # Remove alias definitions
	 unset # Unset values and attributes of variables and functions
	 until # Initialize an until loop
	 wait # Wait for job completion and return exit status
	 while # Initialize a while loop

	SHORTCUTS
	   # These are not the default shortcuts for the bash shell. The keybindings
	   # can be modified in the readline configuration file which is located at
	   # either /etc/inputrc, ~/.inputrc or $XDG_CONFIG_HOME/readline/inputrc
	 'Del' # Delete character
	 'Esc+!' # Complete command
	 'Esc+/' # Complete filename
	 'Esc+~' # Complete username
	 'Esc+*' # Insert completions
	 'Esc+.' # Insert last argument
	 'Esc+#' # Convert line to comment
	 'Esc+&' # Expand home directory
	 'Esc+\ ' # Delete whitespace at point
	 '@...+Esc' # Complete hostname
	 '$...+Esc' # Complate variable
	 'Home' 'End' # Beginning or end of line
	 'PgUp' 'PgDn' # Beginning or end of history
	 'Rght' 'Left' # Forward or backward character
	 'Ctrl+_' # Undo last action
	 'Ctrl+a' # Clear screen and display
	 'Ctrl+c' # Cancel process
	 'Ctrl+i' 'Tab' # Perform completion
	 'Ctrl+l' # Downcase word
	 'Ctrl+m' 'Enter' # Accept command
	 'Ctrl+u' # Upcase word
	 'Ctrl+y' # Downcase letter
	 'Ctrl+x+g' 'Ctrl-z' # Abort process
	 'Ctrl+x+h' # Fetch last history entry
	 'Ctrl+x+i' # Completions from history file
	 'Ctrl+x+k' # Kill line
	 'Ctrl+x+r' # Re read inputrc
	 'Ctrl+x+v' # Display shell version
	 'Ctrl+Left'  # Transpose words
	 'Ctrl+Rght' 'Ctrl+Left' # Forward or backward word
	 'Ctrl+Shft+Left' # Transpose characters
	 'Ctrl+Up' 'Ctrl+Down' # Previous or next in history
	 'Ctrl+Shft+C' # Copy selected text
	 'Ctrl+Shft+U' # Enter unicode character code
	 'Ctrl+Shft+V' # Paste selected text
	 'Ctrl+h' 'Bkspc' # Backward delete character
	 'Shft+Home' 'Shft+End' # Beginning or end terminal buffer
	 'Shft+PgUp' 'Shft+PgDn' # Page up or down terminal buffer	 

	DEPENDS ON
	 ▸ readline # GNU readline library
	 ▸ glibc # GNU C library
	 ▸ ncurses # SysV curses emulation library

	REQUIRED BY
	 # Everything in linux

	BINARIES
	 ▸ '/bin/bash' # Invoke the gnu bourne again shell
	 ▸ '/bin/bashbug' # Send mail to the bash maintainers
	 ▸ '/bin/shellcheck' # Static analysis tool for shell scripts
	 ▸ '/bin/shfmt' # Shell code formatter
	 
	FILES
	 ▸ "$HOME/.bashrc" # User bash config file
	 ▸ "$HOME/.profile" # User bash profile config file
	 ▸ '/etc/bash.bashrc' # System bash config file
	 ▸ '/etc/inputrc' # Readline config file
	 ▸ '/etc/profile' # System profile config file
	 ▸ '/root/.bashrc' # Root user bash config file

	COMMON USAGE
	REDIRECTIONS
	   # The concept of file descriptors, such as stdin, stdout, and stderr, is not
	   # exclusive to Bash or any particular programming language, it's a
	   # fundamental part of Unix-like operating systems. However, the specific
	   # syntax for redirecting these file descriptors can vary between different
	   # shells and environments, general file descriptors across systems
	 ▸ stdin: <0> # Standard input
	 ▸ stdout: <1> # Standard output
	 ▸ stderr: <2> # Standard error
	   # These are used across various Unix-like systems and programming
	   # environments for handling input and output operations, the way to redirect
	   # these file descriptors can differ, Bash offers various shorthand
	   # redirections like '&>' for redirecting both stdout and stderr
	   # simultaneously, as well as other nuanced redirection capabilities. Sh
	   # (POSIX shell) doesnt support some of the more nuanced redirection syntax
	   # that Bash supports, such as '&>' require the use of more verbose forms like
	   # ">'file' 1>&2", here are the file descriptor redirections that will work in
	   # a standard bash script
	0>'file' # Redirects the stdin from a file
	1>'file' || >'file' # Redirects the stdout to a file
	2>'file' # Redirects the stderr to a file
	&>'file' # Redirects both stdout and stderr to the same file
	0>&1 # Redirects standard input to standard output, rarely useful
	0>&2 # Redirects stdin to stderr, rarely useful
	1>&0 || >&0 # Redirects standard output to standard input, rarely useful
	1>&2 || >&2 # Redirects standard stdout to stderr, commonly used
	2>&0 # Redirects standard error to standard input, rarely useful
	2>&1 # Redirects standard error to standard output, commonly used
	0>>'file' # Append stdin to an existing file
	1>>'file' || >>'file' # Append stdout to an existing file
	2>>'file' # Append stderr to an existing file
	&>>'file' # Append stdout and stderr to an existing file
	>|'file' # Forces output to a file even if the noclobber option is set, which
	   # normally prevents overwriting of files
	exec 3>'file' # Opens file descriptor 3 for writing to a file. This is an
	   # example of using exec to manage file descriptors explicitly, the default
	   # number of available file descriptors is usually 1024 (ulimit -n)
	exec 3>&1 # Duplicates file descriptor 3 to point to the stdout
	exec 3>&4 # Duplicates file descriptor 3 to point to file descriptor 4
	exec 3<&- # Closes input for file descriptor 3
	exec 4>&- # Closes output for file descriptor 4 (same effect as above)
	<command> <'file' # Redirects command input to read from a file for programs
	   # that can take input from stdin eg.
	sort <'data.txt' # sort the data from the file on the command line
	<command> <<EOF >'file' # Provides multi-line input to a command via a here
	   # document and saves the output to 'file' eg.
	sed 's/old/new/' <<EOF >'output.txt' # Define a sed sequence that outputs to
	   # a file when an EOF is encountered in the here document
	old line 1 # Add a line of text with the pattern to be replaced
	old line 2 # Another line
	EOF # Trigger the EOF and the output is printed to the file with the new text
	<command> <<<'string' # Here-string, redirects input to be taken from the
	   # provided string if thats the only form of stdin required eg.
	grep 'pattern' <<<'string containing a pattern' # Highlight the portion of the
	   # string containing the matching pattern provided to grep

	WEBLINKS
	 ▸ 'https://devdocs.io/bash/' # User manual
	 ▸ 'https://man.archlinux.org/man/readline.3' # Readline manpage
	 ▸ 'https://www.gnu.org/software/bash/bash.html' # Official
	 ▸ 'https://scriptim.github.io/bash-prompt-generator/' # Shell prompt generator
	 ▸ 'https://www.gnu.org/software/bash/manual/bash.html' # GNU manual
	 ▸ 'https://docs.linux-code.com/software/bash/manual/bash.html' # Ref manual

