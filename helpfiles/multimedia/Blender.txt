	       _______________  ___________ ____________________________________
	       \__   _  _)    | \_   _____//       \__  __  \_   _____/__  __   \
	        |   __   \    |__|    __)_/    |    \    |   \    __)_ |       _/
	        |________/_______\________/____|____/________/________/____|____/

	DESCRIPTION
	 Blender is a free and open source 3D computer graphics software tool set used
	 for animation, visual effects, printed models, motion graphics, interactive 3D
	 applications and virtual reality. Its often used alongside video game engines
	 like Unreal and Unity. It supports the entirety of the 3D pipeline, modeling,
	 rigging, animation, simulation, rendering, compositing, motion tracking, and
	 video editing. While highly proficient with 3D animation Blender is often used
	 for 2D animations as well.

	COMMANDS
	 blender -a # Render frames from start to end
	 blender -a <options> 'file1' 'file2' # Run blender in animation mode for
	   # multiple input files with different playback options
	 blender -b # Run render in background
	 blender -d # Turn debugging on
	 blender -E <engine> # Specify the render engine
	 blender -e <frame> # Run playback until frame
	 blender -e <frame> # Set render to end at frame 
	 blender -F <format> # Set the render format
	 blender -f <fps> <base> # Specify fps to run playback with
	 blender -f <frame> # Render frame and save it
	 blender -j <frame> # Set playback frame step to frame
	 blender -M # Maximize on opening graphical interface
	 blender -m # Read playback file from disk (no buffer)
	 blender -o '/path/file' # Set the render path and file name
	 blender -P '/path/file' # Run the specified python script
	 blender -s <frame> # Set render to start at frame
	 blender -s <frame> # Start playback from frame
	 blender -S <name> # Set the active scene name for rendering
	 blender -t <threads> # Use amount of threads for rendering or other processes
	 blender -W # Open graphical interface in fullscreen mode
	 blender -w # Open graphical interface with borders
	 blender -x <bool> # Enable the file extension for the render
	 blender -Y # Disable automatic python script execution 
	 blender -y # Enable automatic python script execution
	 blender --addons <addon,*> # Comma separated list of addons to enable
	 blender --app-template '/path/template' # Set the application template
	 blender --debug-all # Enable all debug messages
	 blender --debug-cycles # Enable debug messages from Cycles
	 blender --debug-depsgraph # Enable all debug messages from dependency graph
	 blender --debug-depsgraph-build # Graph construction related debug messages
	 blender --debug-depsgraph-eval # Evaluation related debug messages
	 blender --debug-depsgraph-no-threads # Switch to single threaded evaluation
	 blender --debug-depsgraph-pretty # Enable colors for dependency graph messages
	 blender --debug-depsgraph-tag # Tagging related debug messages
	 blender --debug-depsgraph-time # Timing related debug messages
	 blender --debug-depsgraph-uuid # Verify validity of session wide identifiers
	   # assigned to ID data blocks
	 blender --debug-events # Enable debug messages for the event system
	 blender --debug-exit-on-error # Immediately exit when errors are detected
	 blender --debug-ffmpeg # Enable debug messages from FFmpeg library
	 blender --debug-fpe # Enable floating point exceptions
	 blender --debug-freestyle # Enable debug messages for Freestyle
	 blender --debug-ghost # Enable debug messages for Ghost (Linux only)
	 blender --debug-gpu # Enable GPU debug context and information for OpenGL 4.3+
	 blender --debug-gpu-disable-ssbo # Disable use of shader storage buffer objects
	 blender --debug-gpu-force-workarounds # Enable workarounds for typical GPU
	   # issues and disable all GPU extensions
	 blender --debug-handlers # Enable debug messages for event handling
	 blender --debug-io # Enable debug messages for IO
	 blender --debug-jobs # Enable time profiling for background jobs
	 blender --debug-libmv # Enable debug messages from libmv library
	 blender --debug-memory # Enable fully guarded memory allocation and debugging
	 blender --debug-python # Enable debug messages for Python
	 blender --debug-value <value> # Set debug value of <value> on startup
	 blender --debug-wintab # Enable debug messages for Wintab
	 blender --debug-wm # Enable debug messages for the window manager, show all
	   # operators in search and show all keymap errors
	 blender --debug-xr # Enable debug messages for virtual reality contexts and
	   # enable the OpenXR API validation layer
	 blender --debug-xr-time # Virtual reality frame rendering times debug messages
	 blender --disable-abort-handler # Disable the abort handler
	 blender --disable-crash-handler # Disable the crash handler
	 blender --log <match,*> # Enable logging categories
	 blender --log-file '/path/file' # Set a file to output the log to
	 blender --log-level <level> # Set the logging verbosity level 
	 blender --log-show-backtrace # Show backtrace for each log message 
	 blender --log-show-basename # Only show file name in output without path
	 blender --log-show-timestamp # Show a timestamp for each log message 
	 blender --open-last # Open the most recently opened blend file
	 blender --python-console # Run blender with an interactive python console
	 blender --python-expr <expression> # Run the given python expression 
	 blender --python-text <name> # Run the specified python text block
	 blender --python-use-system-env # Allow python to use system environment vars
	 blender --verbose <level> # Set the logging verbosity level for debug messages 
	 blender-thumbnailer 'in.blend' 'out.png' # Use blender as thumbnail creator

	SHORTCUTS
	   # Not all of these shortcuts are the default keybindings for Blender, they
	   # can be modified in the keymap section of the Blender preferences, there are
	   # also more shortcuts for Blender than the ones in this list. Blender has a
	   # lot of shortcuts by default, probably more than any other application,
	   # because it has so many features that operate independently
	 'a' # Select all objects
	 'b' # Set marker box select
	 'c' # Set circle select
	 'e' # Extrude selected object or set end frame
	 'f' # Change brush size or make face from selected object
	 'g' # Move selected object (focus dependent)
	 'h' # (Un)hide node, change handle to bezier
	 'h'|'Alt+h' # Hide and unhide selected object 
	 'i' # Insert keyframe or use render buffer
	 'k' # Split strip
	 'l' # Select connected or select linked objects
	 'm' # Add marker, move selected object to layer or move to bone layers
	 'n' # Properties or toggle show properties
	 'o' # Toggle propositional editing mode
	 'p' # Separate selected object
	 'r' # Rotate selected object (focus dependent)
	 's' # Scale selected object (focus dependent) or set start frame
	 't' # Toggle show toolbar
	 'v' # Change handle to vector
	 'v' # Rip selected object
	 'v' # Zoom in background
	 'w' # Only render selected, subdivide selected object or switch cursor modes
	 'x' # Delete item (focus dependent)
	 'y' # Separate images
	 'Num0' # Camera view
	 'Num1' # Switch to front view (x)
	 'Num2' # Nudge viewport down
	 'Num3' # Switch to side view (y)
	 'Num4' # Nudge viewport left
	 'Num5' # Switch view perspective and orthographic
	 'Num6' # Nudge viewport right
	 'Num7' # Switch to top view (z)
	 'Num8' # Nudge viewport up
	 'Num9' # View orbit
	 'F3' # Save render
	 'F11' # Show last render
	 'F12' # Render image
	 'Esc' # Stop render process
	 'Home' # Show all frames
	 'Left'/'Rght' # Next or previous frame
	 'PgUp'/'PgDn' # Next or previous strip
	 'Spce' # Play animation
	 'Tab' # Edit group or edit object mode
	 'Up'/'Down' # Forward or back 10 frames
	 '.' # Zoom to object
	 ']'/'[' # Scroll up and down hierarchy
	 'Alt+a' # Play/stop animation
	 'Alt+e' # Relax pose
	 'Alt+f' # Fill align selected faces or switch bone direction
	 'Alt+g' # Ungroup objects
	 'Alt+i' # Remove keyframe
	 'Alt+l' # Clear pose location
	 'Alt+m' # Show merge vertices dialog for selected object
	 'Alt+p' # Clear selected object parent
	 'Alt+r' # Clear pose rotation
	 'Alt+s' # Clear pose scale or toggle shrink and flatten tool 
	 'Alt+t' # Clear selected object track or clear tilt
	 'Alt+v' # Zoom out background
	 'Alt+F11' # Full screen mode
	 'Alt+Shft+a' # Play animation in reverse
	 'Ctrl+a' # Apply pose
	 'Ctrl+c' # Copy pose or strip
	 'Ctrl+e' # Show edit edges dialog for selected object
	 'Ctrl+f' # Rotate brush texture
	 'Ctrl+g' # Add to bone group
	 'Ctrl+g' # Make group
	 'Ctrl+i' # Invert object selection
	 'Ctrl+l' # Select all linked objects
	 'Ctrl+m' # Apply mirror modifier to selected object or enable mirror mode
	 'Ctrl+n' # Recalculate roll
	 'Ctrl+o' # Change active camera
	 'Ctrl+p' # Change selected object parent
	 'Ctrl+r' # Create a loop cut on selected object or rotate object
	 'Ctrl+s' # Save current session
	 'Ctrl+t' # Change selected object track, tilt object, or toggle FPS
	 'Ctrl+u' # Save over default scene
	 'Ctrl+v' # Paste pose or paste strip
	 'Ctrl+z'/'Shft+Ctrl+Z' # Undo or redo last action
	 'Ctrl+1...4' # Add subdivision level
	 'Ctrl+F4' # Make screen cast
	 'Ctrl+F12' # Render animation
	 'Ctrl+Left'/'Ctrl+Rght' # Switch to next and previous workspace
	 'Ctrl+PgUp'/'Ctrl+PgDn' # Jump to next and previous keyframe
	 'Ctrl+Spce' # Toggle show widget area
	 'Ctrl+Tab' # Weight paint mode
	 'Ctrl+Up' # Maximize sub window
	 'Ctrl+Alt+a' # Align bones
	 'Ctrl+Alt+i' # Remove IK
	 'Shft+A' # Add node or object
	 'Shft+B' # Only render portion
	 'Shft+C' # Reset 3D field to original angle
	 'Shft+D' # Duplicate item (focus dependent)
	 'Shft+F' # Change brush strength
	 'Shft+H' # Reset to default handle
	 'Shft+I' # Add IK
	 'Shft+L' # Lock strip
	 'Shft+M' # View bone layers
	 'Shft+S' # Snap strip to scrubber
	 'Shft+W' # Set bone flag
	 'Shft+F1' # Append file
	 'Shft+F2' # Show logic editor on workspace
	 'Shft+F3' # Show node editor on workspace
	 'Shft+F4' # Show python console on workspace
	 'Shft+F5' # Show 3D viewport on workspace
	 'Shft+F6' # Show graph editor on workspace (f-curve)
	 'Shft+F7' # Show properties on workspace
	 'Shft+F8' # Show video sequence editor on workspace
	 'Shft+F9' # Show outliner on workspace
	 'Shft+F10' # Show UV image editor on workspace
	 'Shft+F11' # Show text editor on workspace
	 'Shft+Left'/'Shft+Rght' # Jump to start or end point
	 'Shft+\\' # Enable fly mode 
	 'Shft+Alt+F' # Beauty fill align selected faces 
	 'Shft+Alt+L' # Unlock strip
	 
	DEPENDS ON
	 ▸ alembic # Open framework for storing and sharing scene data
	 ▸ bash # GNU Bourne Again shell
	 ▸ boost-libs # Free peer reviewed portable C++ source runtime libraries
	 ▸ draco # Library for compressing and decompressing 3D meshes and point clouds
	 ▸ embree # Collection of high performance ray tracing kernels
	 ▸ expat # XML parser library
	 ▸ ffmpeg # Complete solution to record, convert and stream audio and video
	 ▸ fftw # Library for computing the discrete Fourier transform (DFT)
	 ▸ freetype2 # Font rasterization library
	 ▸ gcc-libs # Runtime libraries shipped by GCC
	 ▸ glew # OpenGL Extension Wrangler Library
	 ▸ glibc # GNU C Library
	 ▸ gmp # Free library for arbitrary precision arithmetic
	 ▸ hicolor-icon-theme # Freedesktop.org Hicolor icon theme
	 ▸ imath # C++ and python library for vector, matrix, and math operations
	 ▸ intel-oneapi-compiler-dpcpp-cpp-runtime-libs # Intel oneAPI C++ compiler
	 ▸ intel-oneapi-compiler-shared-runtime-libs # Intel oneAPI C++ compiler runtime
	 ▸ jack # JACK low latency audio server
	 ▸ jemalloc # General purpose scalable concurrent malloc implementation
	 ▸ level-zero-loader # API low level interfaces in oneAPI platform devices
	 ▸ libepoxy # Library handling OpenGL function pointer management
	 ▸ libharu # C library for generating PDF documents
	 ▸ libjpeg-turbo # JPEG image codec with accelerated baseline compression
	 ▸ libpng # Collection of routines used to create PNG format graphics files
	 ▸ libsndfile # C library for reading and writing files containing sampled audio
	 ▸ libspnav # Alternative to the proprietary 3Dconnexion device driver and SDK
	 ▸ libtiff # Library for manipulation of TIFF images
	 ▸ libwebp # WebP library and conversion tools
	 ▸ libx11 # X11 client-side library
	 ▸ libxfixes # X11 miscellaneous fixes extension library
	 ▸ libxi # X11 Input extension library
	 ▸ libxkbcommon # Keymap handling library for toolkits and window systems
	 ▸ libxml2 # XML C parser and toolkit
	 ▸ libxrender # X Rendering Extension client library
	 ▸ libxxf86vm # X11 XFree86 video mode extension library
	 ▸ llvm-libs # LLVM runtime libraries
	 ▸ materialx # Open standard for development content in computer graphics
	 ▸ onetbb # High level abstract threading library
	 ▸ openal # Cross-platform 3D audio library, software implementation
	 ▸ opencollada # Stream based reader and writer library for COLLADA files
	 ▸ opencolorio # Color management framework for visual effects and animation
	 ▸ openexr # High dynamic range image file format library
	 ▸ openimagedenoise # Intel Open Image Denoise Library
	 ▸ openimageio # Library for reading and writing images
	 ▸ openjpeg2 # Open source JPEG 2000 codec
	 ▸ openpgl # Intel Open Path Guiding Library
	 ▸ openshadinglanguage # Advanced shading language for production GI renderers
	 ▸ opensubdiv # Open Source subdivision surface library
	 ▸ openvdb # Tools for the efficient storage and manipulation of sparse data
	 ▸ openxr # Open standard for virtual reality and augmented reality platforms
	 ▸ potrace # Utility for tracing a bitmap
	 ▸ pugixml # Light weight, simple and fast XML parser for C++ with XPath support
	 ▸ pystring # C++ functions matching the behavior of python string methods
	 ▸ python # The python programming language
	 ▸ python-numpy # Scientific tools for Python
	 ▸ python-requests # Python HTTP for Humans
	 ▸ sdl2 # Library for access to a video, audio, mouse, and keyboard
	 ▸ shared-mime-info # Freedesktop.org Shared MIME Info
	 ▸ usd # 3D VFX pipeline interchange file format
	 ▸ xdg-utils # Command line tools assist with desktop integration tasks
	 ▸ yaml-cpp # YAML parser and emitter in C++, written around the YAML
	 ▸ zlib # Compression library implementing the deflate compression method
	 ▸ zstd # Zstandard, fast realtime compression algorithm

	BINARIES
	 ▸ '/bin/blender' # Run blender
	 ▸ '/bin/blender-thumbnailer' # Run blender thumbnailer
	 ▸ '/bin/blender-softwaregl' # Run blender softwareGL version

	COMMON USAGE
	ENVIRONMENT VARIABLES
	   # These are the shell variables that correspond to Blender, their values must
	   # reference an existing directory or they will be ignored
	 BLENDER_SYSTEM_DATAFILES='/path/file' # Directory for system wide data files
	 BLENDER_SYSTEM_PYTHON='/path/file' # Directory for system Python libraries
	 BLENDER_SYSTEM_RESOURCES='/path/file' # Directory for system files
	 BLENDER_SYSTEM_SCRIPTS='/path/file' # Directory for system wide scripts
	 BLENDER_USER_CONFIG='/path/file' # Directory for user configuration files
	 BLENDER_USER_DATAFILES='/path/file' # Directory for user data files
	 BLENDER_USER_RESOURCES='/path/file' # Directory for user files
	 BLENDER_USER_SCRIPTS='/path/file' # Directory for user scripts
	 OCIO='/path/file' # Path to override the OpenColorIO configuration file

	WEBLINKS
	 ▸ 'https://docs.blender.org/api/current/index.html' # Python API manual
	 ▸ 'https://docs.blender.org/manual/en/latest/' # Blender manual
	 ▸ 'https://en.wikipedia.org/wiki/Blender_(software)' # Wikipedia
	 ▸ 'https://github.com/blender/blender' # Git repo
	 ▸ 'https://projects.blender.org/blender/blender' # Core git repo
	 ▸ 'https://wiki.archlinux.org/title/Blender' # Arch wiki
	 ▸ 'https://www.blender.org' # Official page

